<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="766f934f-eb42-420b-a12b-c49a2cf884ea" activeEnvironment="Default" name="webshopMockService" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="44ef2bd2-9966-4351-8f9d-2ed3641b85b7" port="8080" path="/" host="Lenovo-G580" name="webshopService"><con:settings/><con:properties/><con:restMockAction name="/product" method="GET" resourcePath="/product" id="bdb76766-2fa6-4e97-b23b-b3cf0e076142"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="allProduct" id="b2a65247-a906-4e97-8463-580b376f0ee0" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"products": [
		{
			"id": 1,
			"name": "Brainbox - Inventions",
			"price": 12.5,
			"src": "http://www.englishwooks.com/2308-large_default/brainbox-inventions.jpg"
		},
		{
			"id": 2,
			"name": "Brainbox - Pradators",
			"price": 10.5,
			"src": "http://www.hengistkites.com/media/ecom/prodlg/rsz_3bbox_predators%20(1).jpg"
		},
		{
			"id": 3,
			"name": "Brainbox - Animals",
			"price": 11.5,
			"src": "https://cogsthebrainshop.ie/wp-content/uploads/2013/09/Brainbox-Animals.jpg"
		},
		{
			"id": 4,
			"name": "Star Wars Risk",
			"price": 53.5,
			"src": "https://cdn.vox-cdn.com/uploads/chorus_asset/file/4087252/RISK_STAR_WARS_Edition_Game__in_package_.0.jpg"
		},
		{
			"id": 5,
			"name": "Torpedo",
			"price": 6.75,
			"src": "http://www.freeiconspng.com/uploads/no-image-icon-6.png"
		},
		{
			"id": 6,
			"name": "Chess",
			"price": 8.89,
			"src": "https://images-na.ssl-images-amazon.com/images/I/513n9iCM3TL._SL500_AC_SS350_.jpg"
		},
		{
			"id": 7,
			"name": "Quixo Classic",
			"price": 24.6,
			"src": "https://tarsasjatekrendeles.hu/shop_seopic/7237/quixo_300823_altpic_1/quixo_300823.jpg?time=1495542904"
		},
		{
			"id": 8,
			"name": "Sudoku",
			"price": 7.15,
			"src": "https://ae01.alicdn.com/kf/HTB1qUdFRVXXXXX0apXXq6xXFXXXa/BOHS-Beech-Wood-Adult-Desktop-font-b-Game-b-font-Memory-Chess-font-b-Sudoku-b.jpg"
		},
		{
			"id": 9,
			"name": "UNO",
			"price": 5.75,
			"src": "https://i5.walmartimages.com/asr/2c09746b-6504-4b35-b889-25b9904efd9f_1.9302de6993c8f9aefe37561ea76d7f3a.jpeg?odnHeight=450&amp;odnWidth=450&amp;odnBg=FFFFFF"
		},
		{
			"id": 10,
			"name": "500 Piece Poker Set",
			"price": 29.99,
			"src": "https://images-na.ssl-images-amazon.com/images/I/41WX8NTX82L.jpg"
		},
		{
			"id": 11,
			"name": "200 Piece Poker Set",
			"price": 16.99,
			"src": "https://img.crazysales.com.au/products_pictures/108/108655_627561_F.jpg"
		},
		{
			"id": 12,
			"name": "European Cities Puzzle 1500 Piece",
			"price": 17.99,
			"src": "http://puzzlepalace.com.au/wp-content/uploads/2016/05/European-Cities-1500-PC-Jigsaw-Puzzle-600x600.png"
		},
		{
			"id": 13,
			"name": "Landscapes Puzzle 500 Piece",
			"price": 8.25,
			"src": "https://data.jigsawpuzzle.co.uk/dtoys.60/jigsaw-puzzle-500-pieces-landscapes-casa-mila-barcelona-spain.8887-2.jpg"
		},
		{
			"id": 14,
			"name": "Movies Puzzle 1000 Piece",
			"price": 10.5,
			"src": "https://images-na.ssl-images-amazon.com/images/I/81JzHKTgbdL._SX355_.jpg"
		}
	]
}</con:responseContent><con:header><con:name>status</con:name><con:value>all</con:value></con:header><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>